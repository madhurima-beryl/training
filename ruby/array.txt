			ARRAY

An array is an ordered list of elements that can be of any type. 

Example:

2.3.1 :001 > [ 4, 'madhu', 3.000, "chhabra"]
 => [4, "madhu", 3.0, "chhabra"] 

The above array has strings, an integer, and a float. Arrays can have anything in them (even other arrays!).

 a1 = [ 28, 41,73,85]
 => [28, 41, 73, 85] 
2.3.1 :003 > arr = [ 4, 'madhu', 3.000, "chhabra",a1]
 => [4, "madhu", 3.0, "chhabra", [28, 41, 73, 85]] 


------methods on array------------
 arr.first			#first element
 => 4 

2.3.1 :005 > arr.last		#last element
 => [28, 41, 73, 85] 

 arr[3]				#index of element
 => "chhabra" 

map	:	The map method iterates over an array applying a block to each element of the array and returns a new array with those 			results. 
collect	:	Same as map

a1
 => [28, 41, 73, 85] 
2.3.1 :013 > a1.map {|num| num+2}			#non destructive(does not mutate the caller)
 => [30, 43, 75, 87] 
2.3.1 :014 > a1.map {|num| num**2}
 => [784, 1681, 5329, 7225] 
2.3.1 :015 > a1.map {|num| Math.sqrt(num)}
 => [5.291502622129181, 6.4031242374328485, 8.54400374531753, 9.219544457292887] 
2.3.1 :016 > a1
 => [28, 41, 73, 85] 
2.3.1 :017 > a1.map {|num| Math.sqrt(num)**2}
 => [28.000000000000004, 41.0, 72.99999999999999, 85.0] 
2.3.1 :018 > a1.map {|num| Math.sqrt(num**2)}
 => [28.0, 41.0, 73.0, 85.0] 

arr
 => [4, "madhu", 3.0, "chhabra", [28, 41, 73, 85]] 
2.3.1 :022 > arr.pop					#mutates the caller (removes last element)
 => [28, 41, 73, 85] 
2.3.1 :023 > arr
 => [4, "madhu", 3.0, "chhabra"] 
2.3.1 :024 > arr.push(4)				#adding element to last
 => [4, "madhu", 3.0, "chhabra", 4] 
2.3.1 :025 > arr << 32					#same as push
 => [4, "madhu", 3.0, "chhabra", 4, 32] 


2.3.1 :026 > arr.delete_at(3)				#eliminates the value at a certain index from your array.(returns value deleted)
 => "chhabra" 
2.3.1 :027 > arr
 => [4, "madhu", 3.0, 4, 32] 
2.3.1 :028 > arr.delete(4)				#permanently deletes all instances of the provided value from the array.
 => 4 
2.3.1 :029 > arr
 => ["madhu", 3.0, 32] 

uniq	:	It iterates through an array, deletes any duplicate values that exist, then returns the result as a new array.

b= [1,1,1,1,2,2,6,6,6]
 => [1, 1, 1, 1, 2, 2, 6, 6, 6] 
2.3.1 :032 > b.uniq					#uniq method did not modify the original b array; it returned a new array with the 
 => [1, 2, 6] 						#duplicates removed.
2.3.1 :033 > b
 => [1, 1, 1, 1, 2, 2, 6, 6, 6] 

uniq!
 b.uniq!						# the bang operator (!) to this method, you can perform the uniq function 
 => [1, 2, 6]						# destructively. Much like the way the delete method works. 
2.3.1 :035 > b
 => [1, 2, 6] 

unshift	:	this method adds the arguments that you specify to the front of the list.( You can think of this as the opposite of the pop 			method.)

2.3.1 :036 > b.unshift(15)
 => [15, 1, 2, 6] 

-----ITERATING OVER ARRAY-------
each	:	each method works on objects that allow for iteration and is commonly used along with a block. If given a block, each runs the 			code in the block once for each element in the collection and returns the collection it was invoked on. If no block is given, 			it returns an Enumerator. 
b.each
 => #<Enumerator: [15, 1, 2, 6]:each> 

 b.each { |i| puts i+10  }
25
11
12
16
 => [15, 1, 2, 6] 

 b.each do |i|
2.3.1 :009 >     i+=2
2.3.1 :010?>   puts "the value is #{i}"
2.3.1 :011?>   end
the value is 17
the value is 3
the value is 4
the value is 8
 => [15, 1, 2, 6] 
_____________________________
map	:	map creates and returns a new array containing the values returned by the block. if no block is given, map returns an 			Enumerator.
 b.map
 => #<Enumerator: [15, 1, 2, 6]:map> 

b.map { |i| puts i+10 }
25
11
12
16
 => [nil, nil, nil, nil] 
_____________________________
select	:	This method iterates over an array and returns a new array that includes any items that return true to the expression 			provided.

numb = [1,2,3,4,5,6,7,8,9,10]
 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
2.3.1 :002 > numb.select { |n| n>4}
 => [5, 6, 7, 8, 9, 10] 
2.3.1 :003 > numb
 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
_____________________________
each_index	:	iterates through the array and passes the index of the element into the block
arr= [28, 41, 73, 85]
 => [28, 41, 73, 85] 
2.3.1 :033 > arr.each_index{ |i| 
2.3.1 :034 >     puts i+5 }
5
6
7
8
 => [28, 41, 73, 85] 

______________________________
each_with_index	:	it gives us the ability to manipulate both the value and the index by passing in two parameters to the block of code. The first is the value and the second is the index. You can then use them in the block.

arr.each_with_index{ |val , idx| 
2.3.1 :042 >     puts " #{idx}. #{val}   "}
 0. 28   
 1. 41   
 2. 73   
 3. 85   
 => [28, 41, 73, 85] 

-----------------------------

include?

 numb.include?(9)				#method checks to see if the argument given is included in the array. It has a 	
 => true 					#question mark at the end of it which usually means that it will return a boolean value.
2.3.1 :022 > numb.include?(12)
 => false 

flatten

 a = [1, 2, [3,'abc'] , [7,8,9] ]
 => [1, 2, [3, "abc"], [7, 8, 9]] 
2.3.1 :025 > a.flatten				#used to take an array that contains nested arrays and create a one-dimensional array.
 => [1, 2, 3, "abc", 7, 8, 9] 
2.3.1 :026 > a
 => [1, 2, [3, "abc"], [7, 8, 9]] 

product	:	The product method returns an array that is a combination of all elements from all arrays.
sort	:	 returns a sorted array.

arr.product(b)
 => [[28, 15], [28, 1], [28, 2], [28, 6], [41, 15], [41, 1], [41, 2], [41, 6], [73, 15], [73, 1], [73, 2], [73, 6], [85, 15], [85, 1], [85, 2], [85, 6]] 

b
 => [15, 1, 2, 6] 
2.3.1 :054 > b.sort
 => [1, 2, 6, 15] 

-------Problems-----------------
 arr= [ 'b','a']
 => ["b", "a"] 
2.3.1 :003 > arr = arr. product([Array(1..3)])
 => [["b", [1, 2, 3]], ["a", [1, 2, 3]]] 
2.3.1 :004 >    arr.first.delete(arr.first.last)
 => [1, 2, 3] 
2.3.1 :005 > arr
 => [["b"], ["a", [1, 2, 3]]] 

Q Write a program that iterates over an array and builds a new array that is the result of incrementing each value in the original array by a value of 2. You should have two arrays at the end of this program, The original array and the new array you've created. Print both arrays to the screen using the p method instead of puts.

a1 =[23,42,78]
a2 = []
a1.each do |i|
 a2 = a2.push(i+2)
end

p a1
p a2

