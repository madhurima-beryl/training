			RUBY ON RAILS

Original author(s)	:	David Heinemeier Hansson
Initial release		:	13 December 2005; 12 years ago[1]
Stable release		:	9 April 2018
Version			:	5.2.0

Ruby on Rails, or Rails, is a server-side web application framework written in Ruby under the MIT License. Rails is a model–view–controller (MVC) framework, providing default structures for a database, a web service, and web pages.


****** RAILS PHILOSOPHY *********

Don't repeat yourself :

It means that information is located in a single, unambiguous place. For example, using the ActiveRecord module of Rails, the developer does not need to specify database column names in class definitions. Instead, Ruby on Rails can retrieve this information from the database based on the class name.

Convention over Configuration :

It means a developer only needs to specify unconventional aspects of the application. For example, if there is a class Sale in the model, the corresponding table in the database is called sales by default. It is only if one deviates from this convention, such as calling the table "products sold", that the developer needs to write code regarding these names. Generally, Ruby on Rails conventions lead to less code and less repetition.

Fat models, skinny controllers :

It means that most of the application logic should be placed within the model while leaving the controller as light as possible.


****** Installing rails ******

Prerequisites :

$ ruby -v
$ sqlite3 --version

gem install rails

rails -v				# 5.2.0

rails new HospitalManagement		# creating new application
rails new HospitalManagement -d postgresql	#rails new -h (for help)

cd HospitalManagement			#switch to application folder

rails server				#starting web server

*****************************
Work flow for creating Rails Application is as follows −

->Use the rails command to create the basic skeleton of the application.

->Create a database on the PostgreSQL server to hold your data.

->Configure the application to know where your database is located and the login credentials for it.

->Create Rails Active Records (Models), because they are the business objects you'll be working with in your controllers.

->Generate Migrations that simplify the creating and maintaining of database tables and columns.

->Write Controller Code to put a life in your application.

->Create Views to present your data through User Interface.


